IaaS vs. PaaS vs. SaaS : http://www.hostingadvice.com/how-to/iaas-vs-paas-vs-saas/

[SQL vs NoSQL]
    - !!! https://www.sitepoint.com/sql-vs-nosql-differences/
          Projects where SQL is ideal:
                #logical related discrete data requirements which can be identified up-front
                #data integrity is essential
                #standards-based proven technology with good developer experience and support.
          Projects where NoSQL is ideal:
                #unrelated, indeterminate or evolving data requirements
                #simpler or looser project objectives, able to start coding immediately
                #speed and scalability is imperative.
    - !! http://www.informit.com/articles/article.aspx?p=2429465
    - https://www.pluralsight.com/blog/software-development/relational-non-relational-databases



[Scaling DB, MySQL Cluster]
    - https://www.mysql.com/products/cluster/scalability.html
    - https://www.digitalocean.com/community/tutorials/how-to-create-a-multi-node-mysql-cluster-on-ubuntu-16-04
    - http://www.cc.ntu.edu.tw/chinese/epaper/0037/20160620_3707.html
    - https://en.wikipedia.org/wiki/MySQL_Cluster
    - https://www.howtoforge.com/loadbalanced_mysql_cluster_debian
    - https://www.youtube.com/watch?v=DnWItDTZL2c
    - https://www.youtube.com/watch?annotation_id=annotation_1011535783&feature=iv&src_vid=DnWItDTZL2c&v=A7dBB8_yNJI
    - database solution for scaling MySQL used by Youtube : vitess.io
    - ![good concept] https://www.slideshare.net/mkindahl/mysql-sharding-tools-and-best-practices-for-horizontal-scaling
    - ! http://stackoverflow.com/questions/11707879/difference-between-scaling-horizontally-and-vertically-for-databases
        (A good example for horizontal scaling is Cassandra , MongoDB .. and a good example for vertical scaling is MySQL - Amazon RDS)
    - ! http://www.oshyn.com/Blogs/2011/November/A-Summary-of-Scaling-Options-for-MySQL?page=NaN


[DB sharding v.s. partitioning]
    https://stackoverflow.com/questions/6188047/why-do-we-divide-a-mysql-table-into-many-smaller-tables
    https://stackoverflow.com/questions/23977850/when-to-use-horizontal-partitioning-and-when-to-use-database-sharding
    https://www.quora.com/Whats-the-difference-between-sharding-DB-tables-and-partitioning-them
    https://dev.mysql.com/doc/refman/5.7/en/partitioning-overview.html
    https://dev.mysql.com/doc/refman/5.7/en/partitioning.html
    https://stackoverflow.com/questions/20771435/database-sharding-vs-partitioning
    



[Database Normalization] 
   There are two goals of the normalization process: 
   (1) eliminating "redundant" data (for example, storing the same data in more than one table) 
   (2) ensuring data "dependencies" make sense (only storing related data in a table).

   However if Normalization goes too far, it will impact performace.
   [WHY] https://www.essentialsql.com/get-ready-to-learn-sql-database-normalization-explained-in-simple-english/       
       - to minimize duplicate data, 
       - to minimize or avoid data modification issues
       - to simplify queries. 

   [HOW]
        http://www.1keydata.com/database-normalization/
        https://www.thoughtco.com/database-normalization-basics-1019735
        http://www.studytonight.com/dbms/database-normalization.php
        https://www.tutorialspoint.com/dbms/database_normalization.htm
        !! https://www.essentialsql.com/get-ready-to-learn-sql-database-normalization-explained-in-simple-english/

        [1NF] First Normal Form : https://www.essentialsql.com/get-ready-to-learn-sql-8-database-first-normal-form-explained-in-simple-english/
            # Primary key uniquely identify each row, Eliminate duplicative columns
            # Each column contains atomic values, not repeating groups of columns (When a value is atomic, the values cannot be further subdivided)

        [2NF] Second Normal Form : https://www.essentialsql.com/get-ready-to-learn-sql-10-database-second-normal-form-explained-in-simple-english/
            # The table is in 1st normal form
            # All non-key attributes are fully functional dependent on the primary key (primary key maybe composite key, it's considered "NOT fully dependent" when a column depends on only parial of primary key).
            
        [3NF] Third Normal Form : https://www.essentialsql.com/get-ready-to-learn-sql-11-database-third-normal-form-explained-in-simple-english/
            # A table is in 2nd normal form.
            # A is functionally dependent on B, and B is functionally dependent on C. In this case, C is transitively dependent on A via B.
              - It contains only columns that are non-transitively dependent on the primary key(There is no transitive functional dependency).
              OR : 
              - Every non-prime attribute of table must be dependent on primary key, or we can say that, there should not be the case that a non-prime attribute is determined by another non-prime attribute. 
              OR : 
              - To be non-transitively dependent, then, means that all the columns are dependent on the primary key (a criteria for 2nd normal form) and no other columns in the table.


[Scaling Web Server]
    - ! https://blog.hartleybrody.com/scale-load/
    - https://www.digitalocean.com/community/tutorials/5-common-server-setups-for-your-web-application
    

[Reverse Proxy Server - related to CDN]
    - https://www.nginx.com/blog/10-tips-for-10x-application-performance/
      (1) Load balancing
      (2) Caching static files
      (3) Securing your site
    - !!! http://stackoverflow.com/questions/224664/difference-between-proxy-server-and-reverse-proxy-server
    - ! https://www.linuxbabe.com/it-knowledge/differences-between-forward-proxy-and-reverse-proxy
    - [nice picture]
      ! https://www.incapsula.com/cdn-guide/glossary/reverse-proxy.html 
      https://www.quora.com/Whats-the-difference-between-a-reverse-proxy-and-forward-proxy
      http://www.jscape.com/blog/bid/87783/Forward-Proxy-vs-Reverse-Proxy 
    - https://www.keycdn.com/support/using-a-varnish-cdn-stack-with-keycdn/
    - https://www.nginx.com/resources/glossary/reverse-proxy-server/


[CDN (Content Delivery Network)]
    https://www.keycdn.com/content-delivery-network
    https://www.incapsula.com/cdn-guide/glossary/reverse-proxy.html


!!! http://highscalability.com/all-time-favorites/

Scalable Web Architecture : http://www.aosabook.org/en/distsys.html

Visualize Database Schemas (tool) :  http://www.codediesel.com/data/5-tools-to-visualize-database-schemas/


[Task Manager & Message Broker (Queue)]
    [RabbitMQ] : message broker, Advanced Message Queuing Protocol (AMQP) 
                 http://www.rabbitmq.com/getstarted.html
                 
    [RabbitMQ and Celery]
        - !! https://abhishek-tiwari.com/post/amqp-rabbitmq-and-celery-a-visual-guide-for-dummies
        - !! How Instagram Feeds Work: Celery and RabbitMQ : https://blogs.vmware.com/vfabric/2013/04/how-instagram-feeds-work-celery-and-rabbitmq.html

    [Celery] http://www.celeryproject.org/
        - MULTI BROKER SUPPORT
          The recommended message broker is RabbitMQ, but support for Redis, Beanstalk, MongoDB, CouchDB, and databases (using SQLAlchemy or the Django ORM) is also available.

    [Queue]  
         !! http://queues.io/
         https://github.com/resque/resque
         http://cakeresque.kamisama.me/

