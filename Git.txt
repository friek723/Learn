
GIT
    - Tools : [Git for windows] https://git-scm.com/downloads
              [SourceTree] https://www.sourcetreeapp.com/
              [tortoiseGit]

		- !!! Great Tutorials
		     https://www.atlassian.com/git/tutorials/setting-up-a-repository
		     https://www.atlassian.com/git/tutorials/syncing
		     https://www.atlassian.com/git/tutorials/advanced-overview
		                   
    - http://www.slideshare.net/littlebtc/git-5528339
      http://backlogtool.com/git-guide/tw/reference/git-svn.html
      https://ihower.tw/git/files/ihower-git.pdf
      http://kingofamani.gitbooks.io/git-teach/content/index.html
		- http://blog.gogojimmy.net/2012/02/29/git-scenario/

		     
		- Config : https://git-scm.com/book/zh-tw/v1/%E9%96%8B%E5%A7%8B-%E5%88%9D%E6%AC%A1%E8%A8%AD%E5%AE%9AGit
		      User name for commit : git config --global user.name "John Doe"

		- How do I disable password prompts when doing git push/pull? http://superuser.com/questions/338511/how-do-i-disable-password-prompts-when-doing-git-push-pull
		      0. id_rsa.pub : ssh client 
             authorized_keys : ssh server
             !!! If client/server on different host, we need to generate id_rsa.pub at both side and append to each other's authorized_keys
             Because for hook command in gitServer/hooks/post-receive : ssh root@Client_IP -t "cd /GitCloneFolder/project.git;git pull"
                                                                       "ssh root" needs client password, and "git pull" needs server password                                                                  
		      1. ssh-keygen -t rsa   (this generates key at "~/.ssh/id_rsa.pub")
		      2. cat id_rsa.pub >> ~/.ssh/authorized_keys  (Append the contents of your public key (that's id_rsa.pub) to the Git server's ~/.ssh/authorized_keys file.)
          3. If not work, check /etc/ssh/sshd_config  (Default config should work[No need keys : RSAAuthentication/PubkeyAuthentication/AuthorizedKeysFile], restart service if modified)
                check file permissions on the ~/.ssh/
                    http://vikastestingmind.blogspot.tw/2014_11_01_archive.html
                    !!!The most common cause for SSH public key authentication mysteriously not working is incorrect file permissions on the ~/.ssh/ files. As a general rule, your file permissions (on both machines) should be at least as restrictive as:
										~/.ssh/                      rwx------ (700)
										~/.ssh/authorized_keys       rw-r--r-- (644)
										~/.ssh/id_rsa                rw------- (600)
										~/.ssh/id_rsa.pub            rw-r--r-- (644)
          4. If not work, make sure client's cloned folder(where we do git pull) belongs to ssh key(id_rsa.pub) user				
         
		- How to hook (automation after push):  
		                http://githooks.com/
		                1. Create file : git_server/hooks/post-receive   (make it executable)
		                2. Add command in post-receive  (will do command after push)
		                   Ex : ssh root@127.0.0.1 -t "cd /root/tmp/test/git;git pull origin master"  --> auto git pull after push
		                3. Need to disable ssh password as above 'How do I disable password...'
		                4. (Option) If need 'sudo' doing git pull, must make files under target hook folder chmod 777 + 'git reset --hard HEAD'(files modified somehow)
		                
		- git pull while not in a git directory : http://stackoverflow.com/questions/5083224/git-pull-while-not-in-a-git-directory    (The solution "ssh username@atyourserver.com..." works)  
		          
		- Conflict (Merge & Rebase) : https://blog.yorkxin.org/posts/2011/07/29/git-rebase/
		                              !https://ihower.tw/blog/archives/3843   --> 你修改比較多，預期會有較多的 conflict，建議用 merge。如果修改範圍較小，不太預期有 conflict，則建議可以加上 rebase 參數
		                              
		- Add-an-empty-directory : (create a .gitignore file inside that directory)
		                           (Directories are added automatically when adding files inside them. That is, directories never have to be added to the repository, and are not tracked on their own.)
		                            http://stackoverflow.com/questions/115983/how-can-i-add-an-empty-directory-to-a-git-repository
		- gitignore : (ignore a folder) http://stackoverflow.com/questions/1470572/gitignore-ignore-any-bin-directory 
		              http://git-scm.com/docs/gitignore
		                            
		- How to solve conflicts (with IDE IntelliJ): 
		                (1)git pull -> (2)Failed [not latest version] -> (3)git commit (don't push) -> (4)git pull -> (5)auto merge -> (6)git push -> (7)Done
                                -> (2)success -> (3)git commit & push -> (4)Done                               -> (5)manually merge (if conflicts) -> (6)git commit & push -> (7)Done
    
    - Change case(大小寫) of a file on Windows : http://stackoverflow.com/questions/1793735/change-case-of-a-file-on-windows
                                                 http://stackoverflow.com/questions/17683458/how-do-i-commit-case-sensitive-only-filename-changes-in-git
                                                 
    - Branching and Merging : merge then push
                              https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging
                              https://git-scm.com/book/en/v2/Git-Branching-Branch-Management
                              https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows
                              https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches
                              (Rebasing) https://git-scm.com/book/en/v2/Git-Branching-Rebasing
                                         !https://blog.yorkxin.org/posts/2011/07/29/git-rebase/
                              git 如何把 merge 而且已經 push 的 branch 給回復 : http://dev.sopili.net/2014/08/git-revert-pushed-no-ff-merge.html
                              !! https://www.atlassian.com/git/tutorials/using-branches/git-checkout
                              實際操作,合併與他人做的專案 : http://italwaysrainonme.blogspot.tw/2012/12/gitmerge_20.html
                              
    - cherry-pick vs merge : http://stackoverflow.com/questions/6372044/how-do-i-merge-a-specific-commit-from-one-branch-into-another-in-git
                             http://stackoverflow.com/questions/881092/how-to-merge-a-specific-commit-in-git
                             http://stackoverflow.com/questions/1241720/git-cherry-pick-vs-merge-workflow
                             
    - Remove uncommitted & untracked files on pull : http://stackoverflow.com/questions/1125968/force-git-to-overwrite-local-files-on-pull
         	git reset --hard HEAD  --> revert uncommitted changes
					git clean -f -d    --> remove untracked files
					git pull           --> update latest version from server
    
    - Unstage : Use "git reset HEAD <file>..." to unstage

    - master : The default branch name in Git is master.
               The “master” branch in Git is not a special branch. It is exactly like any other branch. 
               The only reason nearly every repository has one is that the git init command creates it by default and most people don’t bother to change it.
    
    - origin : origin is not the remote repository name. It is an alias given to the URL pointing to the default remote repository.
               This alias is set by default when cloning from/to a remote for the first time.        
        "git remote" or "git remote -v" : lists the shortnames of each remote handle you’ve specified.
                                          If you’ve cloned your repository, you should at least see origin – that is the default name Git gives to the server you cloned from.
    
                          
		[command] 
		    - clone : git clone ssh://jh7b@10.16.90.215:22222/var/www/html/jh7b/testsite/assets
		              git clone https://
		              git clone git://
		    - Set up server : step 1. https://git-scm.com/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server
		                      step 2. https://git-scm.com/book/en/v2/Git-on-the-Server-Generating-Your-SSH-Public-Key
		                      step 3. https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server  (!!this step alone is enough)
		                      (Simplified ver : http://blog.gtwang.org/linux/linux-git-server-using-ssh/)
		                      
				- create a new repo locally and push to remote : 
				                                                 git init
				                                                 git add .
				                                                 git commit -m "comment"
				                                                 git remote add origin git@gitserver:/opt/git/project.git	  (Add the remote repository)                                              
				                                                 git push origin master				                                                 
				                                               (OR: 
				                                                 git remote add appharbor MY_REPOSITORY_URL)   
				                                                 git push appharbor master
				                                               )
				                                                 
        - Jump to any previous version temporarily : git checkout SHA_number
                                                     git checkout Branch_Name (Ex : git checkout master)  => (Going back to lastest ver, otherwise git doesn't know which branch it is when doing pull)
                                                     
        - Get current version(commit) :  git rev-parse HEAD   (http://stackoverflow.com/questions/949314/how-to-retrieve-the-hash-for-the-current-commit-in-git)
         
        - git diff filename : see difference between local and last commit in console                                      
				- git checkout file: to discard changes in working directory
				
				- remote url : "git remote show origin" or "git remote -v"  (http://stackoverflow.com/questions/4089430/how-can-i-determine-the-url-that-a-local-git-repo-was-originally-cloned-from)
				
				- Branch
				     show current branch : git branch
				     show all local and remote branches : git branch -a
				     show only remote branches : git branch -r
				                 
				- list untracked files : git status -u
				
				- pull v.s. fetch : git pull does a git fetch followed by a git merge (http://stackoverflow.com/questions/292357/what-are-the-differences-between-git-pull-and-git-fetch)
				
				- Deletes all Untracked files/directories : git clean -f -d
								  
				[Add/Rm]
						- git add/rm file: to update(stage) what will be committed                                                   
						- git add -A :  This adds, modifies, and removes index entries to match the working tree.
						                If no <pathspec> is given, the current version of Git defaults to ".";
						                http://stackoverflow.com/questions/492558/removing-multiple-files-from-a-git-repo-that-have-already-been-deleted-from-disk

				[Revert] Used if pushed already (compare with Reset & Rebase)
								- Revert to a previous Git commit : 
								                            !!!http://stackoverflow.com/questions/4114095/revert-to-a-previous-git-commit
								                            !!! Good example : http://serebrov.github.io/html/2014-01-04-git-revert-multiple-recent-comments.html
								                            https://www.atlassian.com/git/tutorials/undoing-changes/git-revert
				                                    !https://ihower.tw/blog/archives/2622
				                                    http://gitbook.liuhui998.com/4_9.html
				                                    http://stackoverflow.com/questions/14075581/git-undo-all-uncommitted-changes
                                            git 如何把 merge 而且已經 push 的 branch 給回復 : http://dev.sopili.net/2014/08/git-revert-pushed-no-ff-merge.html
                - git revert HEAD~3 : Revert the changes specified by the fourth last commit in HEAD and create a new commit with the reverted changes.
                - git revert HEAD : Revert the commit we just created
                - git revert a867b4af 25eee4ca 0766c053 : This will create three separate revert commits 
                - git revert HEAD~2..HEAD : It also takes ranges. This will revert the last two commits
                                                            
				[Reset and Rebase] ONLY used if NOT push yet	
				    - Rebase v.s. Merge : !https://ihower.tw/blog/archives/3843   --> 你修改比較多，預期會有較多的 conflict，建議用 merge。如果修改範圍較小，不太預期有 conflict，則建議可以加上 rebase 參數				
				    - Rebase v.s. Reset : !https://ihower.tw/blog/archives/2622
				    - Revert vs. Reset : https://www.atlassian.com/git/tutorials/undoing-changes/git-revert/
				    - !!! Difference between git reset soft, mixed and hard : 
				                   !!http://davidzych.com/difference-between-git-reset-soft-mixed-and-hard/
                           http://stackoverflow.com/questions/3528245/whats-the-difference-between-git-reset-mixed-soft-and-hard    
                           [Summary] --soft : reset HEAD
                                     --mixed (default): reset HEAD & staging area 
                                     --hard : reset HEAD & staging area & working copy               
						- git reset file/dir  : "undo" the git add (unstage),  (default : --mixed)   
						                        (http://stackoverflow.com/questions/1505948/how-do-i-remove-a-single-file-from-the-staging-area-of-git-but-not-remove-it-fro)	                
						- git reset --hard HEAD :   revert all uncommitted changes                                               
		        - git reset --hard HEAD~1 : delete the latest commit(only locally, do not use it if pushed!!)
		                                    http://stackoverflow.com/questions/1338728/delete-commits-from-a-branch-in-git
		                                    https://ihower.tw/blog/archives/2622
                                           
                                                 
