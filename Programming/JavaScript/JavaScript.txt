Javascript

    [Babel] 
          - https://babeljs.io/
              Babel is a JavaScript compiler.
              Babel has support for the latest version of JavaScript through syntax transformers. These plugins allow you to use new syntax, right now without waiting for browser support.
              Babel can convert JSX syntax and strip out type annotations. Check out our React preset to get started. 
          - https://github.com/babel/babel
              The compiler for writing next generation JavaScript.
              Babel is a community-driven tool that helps you write the latest version of JavaScript.
              When your supported environments don't support certain features natively, it will help you compile it down to a supported version.

    [Browserify] 
          - http://browserify.org/
              Browserify lets you require('modules') in the browser by bundling up all of your dependencies. 
              Browsers don't have the require method defined, but Node.js does. With Browserify you can write code that uses require in the same way that you would use it in Node.
              Use many of the tens of thousands of modules on NPM in the browser
          - https://github.com/substack/node-browserify
              require('modules') in the browser
              Use a node-style require() to organize your browser code and load modules installed by npm.
              Browserify will recursively analyze all the require() calls in your app in order to build a bundle you can serve up to the browser in a single <script> tag.

              Many npm modules that don't do IO will just work after being browserified. Others take more work.
              Many node built-in modules have been wrapped to work in the browser, but only when you explicitly require() or use their functionality.

          - http://blakeembrey.com/articles/2013/09/introduction-to-browserify/
              Browserify is a development tool that allows us to write node.js-style modules that compile for use in the browser. Just like node, we write our modules in separate files, exporting external methods and properties using the module.exports and exports variables. We can even require other modules using the require function, and if we omit the relative path it'll resolve to the module in the node_modules directory.

              we have a bundle.js file that bundled the three modules we wrote, we can add a single script tag reference to it into our html page and it'll execute in the browser automatically resolving require calls. 

              Since browserify implements the node.js module resolve algorithm, we can easily use npm to install modules from the package manager and use them inside the browser. There are lots of modules on npm that are made for tools such as browserify, but even more exciting is watching modules that were specifically written for node running in a browser environment without any effort. 
          - ! https://scotch.io/tutorials/getting-started-with-browserify
              Browserify lets you use require in the browser, the same way you'd use it in Node. It's not just syntactic sugar for loading scripts on the client. It's a tool that brings all the resources NPM ecosystem off of the server, and into the client.

              Why Browserify: 
              Module loading in the client is an inherently different beast. In the simplest case, you load your modules in a series of <script> tags in your HTML. This is perfectly correct, but it can be problematic for two reasons:
                  (1) It forces you to manage dependencies by ensuring your script tags appear in the proper order, and makes it cumbersome to manage complex dependency graphs
                  (2) To quote Kyle Simpson's in the LAB.js documentation: "with regular <script> tags, you cannot control [script] loading and executing behavior reliably cross-browser."

          - http://jasonlamswatow.com/getting-started-with-browserify/
                 
          - http://fireqqtw.logdown.com/posts/253978-browserify-increases-outside-the-node-modules-path
          - Babelify : http://chris.house/blog/grunt-configuration-for-react-browserify-babelify/
                       If you’re using React’s JSX syntax (which you should be), you’ll need Babelify, which is a Babel transformer specifically made for Browserify. Each time you save a .js in your React application, Babelify will convert your JSX syntax into JavaScript, and Browserify will compile all your separate .js modules together into one file that the browser understands

 
    [Webpack]
          - https://github.com/webpack/webpack
              webpack is a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset.

          - [concept] https://webpack.js.org/concepts/              
          - https://webpack.js.org/    
          - https://webpack.github.io/
          - https://rhadow.github.io/2015/03/23/webpackIntro/
          - !! https://github.com/petehunt/webpack-howto
            Why webpack?
              It's like browserify but can split your app into multiple files. If you have multiple pages in a single-page app, the user only downloads code for just that page. If they go to another page, they don't redownload common code.

              It often replaces grunt or gulp because it can build and bundle CSS, preprocessed CSS, compile-to-JS languages and images, among other things.

              It supports AMD and CommonJS, among other module systems (Angular, ES6). If you don't know what to use, use CommonJS.

          - https://webpack.github.io/docs/what-is-webpack.html
              Existing module bundlers are not well suited for big projects (big single page applications). The most pressing reason for developing another module bundler was "Code Splitting" and that static assets should fit seamlessly together through modularization.

          - !! Video : https://www.youtube.com/watch?v=VkTCL6Nqm6Y
                    --> refer to : https://github.com/petehunt/webpack-howto
          - !! https://github.com/facebookincubator/create-react-app
               (tool used by redux exmaples : http://redux.js.org/docs/introduction/Examples.html)

    [Bower] A package manager for the web
          - https://bower.io/
            Bower can manage components that contain HTML, CSS, JavaScript, fonts or even image files. Bower doesn’t concatenate or minify code or do anything else - it just installs the right versions of the packages you need and their dependencies.

            Bower works by fetching and installing packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for. Bower keeps track of these packages in a manifest file, bower.json

            Bower is optimized for the front-end.

          - https://github.com/bower/bower
            Bower offers a generic, unopinionated solution to the problem of front-end package management,

          - https://gofore.com/stop-using-bower/
            Bower doesn’t support nested dependencies.

          [Bower v.s. npm] 
            - http://stackoverflow.com/questions/18641899/what-is-the-difference-between-bower-and-npm
              npm is most commonly used for managing Node.js modules, but it works for the front-end too when combined with Browserify and/or $ npm dedupe.

              Bower is created solely for the front-end and is optimized with that in mind. The biggest difference is that npm does nested dependency tree (size heavy) while Bower requires a flat dependency tree (puts the burden of dependency resolution on the user).

            - https://www.quora.com/Why-use-Bower-when-there-is-npm
              In almost all cases, it's more appropriate to use Browserify and npm over Bower.
              There is simply no benefit for a front-end developer to use Bower over npm.

              With "browserify or webpack", it becomes super-easy to concatenate all your modules into big minified files, which is awesome for performance, especially for mobile devices. Not so with Bower, which will require significantly more labor to get the same effect.

    [Browserify vs. Webpack vs. grunt vs. gulp]
          - https://scotch.io/tutorials/getting-started-with-browserify
              [Browserify vs Webpack]  
                  Browserify seeks to extend the Node ecosystem into to the browser. It only supports Node's flavor of the CommonJS require syntax, and provides browser-specific shims for much of Node's core functionality.

                  Webpack seeks to unify Javascript module syntaxes and provide tools for a full swath of static asset management tasks. It imposes no restrictions on your choice of module syntax, and offers full support for Javascript, CSS, and even image preprocessing.

                  If your project and dependencies are already closely tied to the Node ecosystem, Browserify is a solid choice. If you need more power to manage static assets than you can shake a script at, Webpack's your tool.
          - https://npmcompare.com/compare/browserify,grunt,gulp,webpack
          - [!!2nd Answer] http://stackoverflow.com/questions/35062852/npm-vs-bower-vs-browserify-vs-gulp-vs-grunt-vs-webpack

          - !! https://medium.com/@housecor/browserify-vs-webpack-b3d7ca08a0a9#.wawxwgdxx
               Avoid the Webpack docs initially and read Pete Hunt’s excellent intro instead. Once you’ve done that, check out hjs-webpack by @HenrikJoreteg to have your mind blown. You’ll be amazed how quickly you can stand up a complex build process using three simple configuration variables. Working in React? Check out React Slingshot for a full-blown React development environment built on Webpack.
               https://github.com/petehunt/webpack-howto
               https://github.com/HenrikJoreteg/hjs-webpack
               ! https://github.com/coryhouse/react-slingshot

    [CommonJS]  CommonJS is a project with the goal of specifying an ecosystem for JavaScript outside the browser (for example, on the server or for native desktop applications).
          - http://wiki.commonjs.org/wiki/CommonJS
          - https://en.wikipedia.org/wiki/CommonJS
          - https://webpack.github.io/docs/commonjs.html
            module.exports + require("xxx");
          - [CommonJS v.s AMD] 
              http://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs
              CommonJS is a way of defining modules with the help of an exports object, that defines the module contents.

              CommonJS was not particularly designed with browsers in mind, so it doesn't fit in the browser environment very well. Apparently, this has something to do with asynchronous loading, etc.

              On the other hand, RequireJS implements AMD, which is designed to suit the browser environment(source). Apparently, AMD started as an spinoff of the CommonJS Transport format and evolved into its own module definition API. 

    [AMD (Asynchronous Module Definition) ]
        - https://webpack.github.io/docs/amd.html
           AMD (Asynchronous Module Definition) was the response to those who thought the CommonJS Module system was not ready for the browser because its nature was synchronous.

           AMD specifies a standard for modular JavaScript such that modules can load their dependencies asynchronously, solving the problems associated with synchronous loading.
        - https://en.wikipedia.org/wiki/Asynchronous_module_definition
        - http://requirejs.org/docs/whyamd.html
        - [CommonJS vs AMD vs ES2015]
          https://auth0.com/blog/javascript-module-systems-showdown/
          "The main difference between AMD and CommonJS lies in its support for asynchronous module loading."

        - !JavaScript Modules : https://medium.freecodecamp.com/javascript-modules-a-beginner-s-guide-783f7d7a5fcc#.f9csbj4ue
        
        [RequireJS] : A implementation of AMD
                      - http://requirejs.org/
                        RequireJS is a JavaScript file and module loader. It is optimized for in-browser use, but it can be used in other JavaScript environments

    [Grunt] Grunt is a JavaScript task runner, a tool used to automatically perform frequently used tasks such as minification, compilation, unit testing, linting, etc. It uses a command-line interface to run custom tasks defined in a file
        - https://gruntjs.com/

    [Gulp] It is a task runner built on Node.js and Node Package Manager (npm), used for automation of time-consuming and repetitive tasks involved in web development like minification, concatenation, cache busting, unit testing, linting, optimization etc.
        - http://gulpjs.com/
        - https://www.sitepoint.com/introduction-gulp-js/    
        - https://www.keithcirkel.co.uk/why-we-should-stop-using-grunt/
                


    [ES6] 
        let : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let
        const : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const
        classes : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes
        Template literals : 
           https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals

        https://ponyfoo.com/articles/es6-arrow-functions-in-depth
        https://ponyfoo.com/articles/es6-classes-in-depth
        https://ponyfoo.com/articles/es6-let-const-and-temporal-dead-zone-in-depth
        https://ponyfoo.com/articles/es6-iterators-in-depth
        https://ponyfoo.com/articles/es6-generators-in-depth
        
    - !! introduction_to_JavaScript
         https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript

    - !!online editor for JS + HTML + CSS : http://plnkr.co/edit/     (Examples : http://plnkr.co/)
    
    - Front-end JavaScript frameworks (Angular.js, Backbone, ember.js): https://github.com/showcases/front-end-javascript-frameworks
                                                                        https://www.airpair.com/js/javascript-framework-comparison
                                                                        
    - http://www.w3schools.com/js/default.asp
    - (jQuery v.s. AngularJS) https://www.airpair.com/angularjs/posts/jquery-angularjs-comparison-migration-walkthrough
                                 http://stackoverflow.com/questions/14994391/thinking-in-angularjs-if-i-have-a-jquery-background
                                 http://stackoverflow.com/questions/13151725/how-is-angularjs-different-from-jquery
    - Closures in JavaScript : http://www.ibm.com/developerworks/web/library/wa-memleak/   --> search "Closures in JavaScript"
                               http://www.w3schools.com/js/js_function_closures.asp
                            
    - Enable cross-origin resource sharing(CORS) : http://enable-cors.org/index.html
      (Related to 'Cross Site Request Forgery(CSRF)' :  https://github.com/pillarjs/understanding-csrf)
    
    - Check-for-null-undefined-or-blank-variables :　if(value){} 　http://stackoverflow.com/questions/5515310/is-there-a-standard-function-to-check-for-null-undefined-or-blank-variables-in
       
    - [IDE] IntelliJ IDEA : https://www.jetbrains.com/idea/
                                   
    [jQuery] jQuery is a lightweight, "write less, do more", JavaScript library.
             The jQuery library contains the following features:
								HTML/DOM manipulation
								CSS manipulation
								HTML event methods
								Effects and animations
								AJAX
								Utilities
             The jQuery library is a single JavaScript file : <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
             
        - http://www.w3schools.com/jquery/default.asp
        - DataTable (generate html <table...> dynamically)  https://datatables.net/
                                                            https://datatables.net/examples/index
                                                            http://datatables.net/manual/index
                                                            http://datatables.net/reference/index
                                                            
                     How to handle large datasets : https://datatables.net/forums/discussion/4214/solved-how-to-handle-large-datasets
                                                    http://datatables.net/forums/discussion/8789/tips-for-using-datatables-with-very-large-data-sets
                                                    ! http://datatables.net/examples/server_side/
                                                    ! http://datatables.net/manual/server-side
                                                    
        - Redirect with post data [note12]: http://stackoverflow.com/questions/19036684/jquery-redirect-with-post-data
        
        
    [AngularJS] AngularJS is a JavaScript framework.  It is a library written in JavaScript.
                AngularJS is a MVC based framework.
                AngularJS extends HTML attributes with Directives, and binds data to HTML with Expressions.
                AngularJS is distributed as a JavaScript file, and can be added to a web page with a script tag:
                   <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular.min.js"></script>

        - Tutorial : 
                   https://docs.angularjs.org/tutorial
                   https://docs.angularjs.org/guide
                   中文: http://checkcheckzz.gitbooks.io/angularjs-learning-notes/content/index.html
                   ! AngularJS Fundamentals In 60-ish Minutes  : https://www.youtube.com/watch?v=i9MHigUZKEM
                   http://campus.codeschool.com/courses/shaping-up-with-angular-js/contents
                   http://blog.miniasp.com/post/2013/04/24/Front-end-Engineering-Fineart-An-Introduction-to-AngularJS.aspx
                   http://weblogs.asp.net/dwahlin/video-tutorial-angularjs-fundamentals-in-60-ish-minutes
                   http://www.w3schools.com/angular/default.asp
                   Example App code : https://github.com/angular-app/angular-app
                                      http://www.codeproject.com/Articles/637430/Angular-js-example-application
	      - $q : http://blog.begin.com.tw/?p=30
	             https://docs.angularjs.org/api/ng/service/$q   
	         
	      - Data Binding : https://docs.angularjs.org/guide/databinding
	                        (Two-way Data Binding) https://docs.angularjs.org/tutorial/step_04
	                                               http://staal.io/blog/2014/02/05/2-way-data-binding-under-the-microscope/
	                        What is two way binding? : http://stackoverflow.com/questions/13504906/what-is-two-way-binding
	                             
	      - Scopes & dirty checking: https://docs.angularjs.org/guide/scope         
	                                 http://stackoverflow.com/questions/24698620/dirty-checking-on-angular                                            
	                      The concept of a scope in Angular is crucial. A scope can be seen as the glue which allows the template, model and controller to work together.
	                      Angular uses scopes, along with the information contained in the template, data model, and controller, to keep models and views separate, but in sync. 
	                      Any changes made to the model are reflected in the view; any changes that occur in the view are reflected in the model.

        - Service v.s. Factory v.s. Provider :
              service : https://docs.angularjs.org/guide/services 
              !http://roxannera.blogspot.tw/2014/01/angularjs-service-factory-provider.html
              !http://stackoverflow.com/questions/15666048/service-vs-provider-vs-factory
              https://www.airpair.com/angularjs/posts/top-10-mistakes-angularjs-developers-make#5-service-vs-factory
              http://hamisme.blogspot.tw/2013/07/service-factoryprovider-angularjs.html
        
        - ng-model v.s. ng-bind : http://stackoverflow.com/questions/12419619/whats-the-difference-between-ng-model-and-ng-bind
                               ng-bind  : one-way data binding ($scope --> view)
		                                          ng-bind and the double-curly notation "{{ ... }}" are interchangeable.
		                                          The advantage ng-bind has over the double-curly notation is that it takes AngularJS time to bootstrap and execute before it can find and replace all the double curly braces from the HTML. 
		                                          That means, for a portion of a second while the browser starts, you might see flashing double curly braces in the UI before AngularJS has the chance to kick in and replace them. 
		                                          This is only for the very first page load, and not on views loaded after the first load. You will not have that issue with ng-bind.
                               ng-model : two-way data binding ($scope --> view and view --> $scope)
        
        - ng-if v.s. ng-show/ng-hide : http://stackoverflow.com/questions/21869283/when-to-favor-ng-if-vs-ng-show-ng-hide
        
        - ng-focus & ng-blur (event when mouse on & leave input box): http://jsfiddle.net/deathhell/UTn5y/2/
                                  
        - UI Bootstrap : http://angular-ui.github.io/bootstrap/
        - UI Grid : http://ui-grid.info
        - Angular Google Pie Chart : http://plnkr.co/edit/mMT8r8?p=info 
        - Animation : http://plnkr.co/edit/uW4v9T
                                            
        - AngularJS + ASP.NET MVC : http://www.codeproject.com/Articles/806029/Getting-started-with-AngularJS-and-ASP-NET-MVC-Par
                                    http://www.codeproject.com/Articles/806500/Getting-started-with-AngularJS-and-ASP-NET-MVC-P
                                    http://www.codeproject.com/Articles/843044/Getting-started-with-AngularJS-and-ASP-NET-MVC-The                                           
        - Single Page Application with ASP.NET and AngularJS : http://channel9.msdn.com/Events/Build/2014/3-644
                                                               (code : https://github.com/jongalloway/Angular-and-ASPNET-Build2014) (Use firefox to open AngularMTG\Step 6\index.html)
               
        - What I would recommend instead of Angular.js? :   https://medium.com/@mnemon1ck/why-you-should-not-use-angularjs-1df5ddf6fc99
                                                            https://medium.com/este-js-framework/what-i-would-recommend-instead-of-angular-js-62b057d8a9e     
               
                                                               
    [AJAX] 
        - (Asynchronous JavaScript and XML.) AJAX is the art of exchanging data with a server, and updating parts of a web page - without reloading the whole page.
        - jQuery provides several methods for AJAX functionality. 
            With the jQuery AJAX methods, you can request text, HTML, XML, or JSON from a remote server using both HTTP Get and HTTP Post. 
                And you can load the external data directly into the selected HTML elements of your web page.
            Writing regular AJAX code can be a bit tricky, because different browsers have different syntax for AJAX implementation. 
                the jQuery team has taken care of this for us, so that we can write AJAX functionality with only one single line of code.                
        - http://www.w3schools.com/ajax/default.asp
        - API doc : http://api.jquery.com/jquery.ajax/
        - Cross-Origin resource sharing(CORS)(Cross origin requests): http://en.wikipedia.org/wiki/Cross-origin_resource_sharing 
                                                                 (See ASP.NET solution below, search "Cross-Origin")
                                                                 (Chrome extension : 'Allow-Control-Allow-Origin')
                                                               !! Enable cross-origin resource sharing(CORS) : http://enable-cors.org/index.html
                                                                 
        - Comet ("server push", "Reverse Ajax) :  Comet is a web application model in which a long-held HTTP request allows a web server to push data to a browser, without the browser explicitly requesting it. 
                                                  (Gmail-send-the-real-time-notification)
                  http://en.wikipedia.org/wiki/Comet_(programming)
                  http://stackoverflow.com/questions/732705/how-is-gmail-chat-able-to-make-ajax-requests-without-client-interaction
                  http://stackoverflow.com/questions/1086380/how-does-facebook-gmail-send-the-real-time-notification
        
    [Node.js] (1)server-side and networking applications, written in JavaScript
              (2)Node.js shines in real-time web applications employing push technology over websockets. 
              (3)The main idea of Node.js: use non-blocking, event-driven I/O to remain lightweight and efficient, 
                       in the face of data-intensive real-time applications that run across distributed devices.
              (4)Node.js operates on a single thread, using non-blocking I/O calls.
                 The design goal of a Node.js application is that any function performing I/O must use a callback.
          
          General Introduction : https://www.quora.com/What-is-Node-js-for
                                 http://www.talentbuddy.co/blog/on-building-with-node-js-at-medium-and-growing-as-a-developer/
                                 http://www.talentbuddy.co/blog/building-with-node-js/
              
          http://www.toptal.com/nodejs/why-the-hell-would-i-use-node-js
          http://www.toptal.com/javascript/guide-to-full-stack-javascript-initjs
          When to use & When not to use ： http://nodeguide.com/convincing_the_boss.html
          Installing Node.js via package manager : https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
          
          Lib : 
              formidable  (receiving file uploads) : http://debuggable.com/posts/parsing-file-uploads-at-500-mb-s-with-node-js:4c03862e-351c-4faa-bb67-4365cbdd56cb
              
          Framework : 
                  AngularJS, Meteor, Backbone, Express or plain NodeJs? When to use each one? : http://www.quora.com/JavaScript-Frameworks/AngularJS-Meteor-Backbone-Express-or-plain-NodeJs-When-to-use-each-one
                  
                  'Meteor' web framework (https://www.meteor.com/about)
                      How Meteor Uses NodeJS - https://meteorhacks.com/how-meteor-uses-node.html
                      7 Reasons to Develop Your Next Web App with Meteor : http://www.sitepoint.com/7-reasons-develop-next-web-app-meteor/
                      http://stackoverflow.com/questions/11461411/node-js-vs-meteor-js-whats-the-difference
                      Examples : http://www.icoding.co/2013/02/meteor-%E5%88%9D%E9%AB%94%E9%A9%97%EF%BC%88%E4%B8%8A%EF%BC%89
                                 http://www.icoding.co/2013/02/meteor-%E5%88%9D%E9%AB%94%E9%A9%97%EF%BC%88%E4%B8%8B%EF%BC%89
                                 https://www.andrewmunsell.com/blog/introduction-to-realtime-web-meteor-and-nodejs
                                 
                  'Express.js' --> web framework for Node.js, and the de-facto standard for the majority of Node.js applications.
                      http://expressjs.com/
                      template : http://jade-lang.com/
          Tutorial :
                  API DOCS : https://nodejs.org/api/
                  https://nodejs.org/documentation/
                  Introduction to Node.js - https://www.youtube.com/watch?v=jo_B4LTHi3I
                  http://nodeschool.io/
				          http://www.nodebeginner.org/index-zh-tw.html        
				          Real Time Chat With NodeJS : http://code.tutsplus.com/tutorials/real-time-chat-with-nodejs-socket-io-and-expressjs--net-31708
				          http://nodeguide.com/beginner.html
				          https://www.codeschool.com/courses/real-time-web-with-node-js
				          For Beginners. Deploy Your Blog to Heroku : http://howtonode.org/deploy-blog-to-heroku
                  ! Seven Awesome Things You Can Build with Node.js : http://blog.teamtreehouse.com/7-awesome-things-can-build-node-js





 
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------



      

JSON  - JSON stands for "JavaScript Object Notation" : http://www.w3schools.com/js/js_json.asp
        Data is in name:value pairs (name and value separated by a colon). 
        The JSON syntax is derived from JavaScript object notation syntax, but the JSON format is text only.(while the "name" of Javascript is non text)
        The JSON format is syntactically identical to the code for creating JavaScript objects.
        Because of this similarity, a JavaScript program can easily convert JSON data into native JavaScript objects.                            
        [Syntax Rules] :
						#Data is in name/value pairs
						#Data is separated by commas
						#Curly braces hold objects
						#Square brackets hold arrays
						#
								JSON Data - A Name and a Value
										JSON data is written as name/value pairs, just like JavaScript object properties.
										A name/value pair consists of a field name (in double quotes), followed by a colon, followed by a value:	"firstName":"John"
										!Note	: JSON names require double quotes. JavaScript names don't.
								
								JSON Objects
										JSON objects are written inside curly braces.
										Just like in JavaScript, objects can contain multiple name/value pairs:
										{"firstName":"John", "lastName":"Doe"}
								
								JSON Arrays
										JSON arrays are written inside square brackets.
										Just like in JavaScript, an array can contain objects

       - http://j796160836.pixnet.net/blog/post/30530326-%E7%9E%AD%E8%A7%A3json%E6%A0%BC%E5%BC%8F
       JSON convert tool  :  http://www.jsoneditoronline.org/
       
       [Java]Convert JSONObject to mongo DBObject :  See [note2] below
                                                     http://stackoverflow.com/questions/5699323/using-json-with-mongodb
       [Java]Convert JSONObject to Map : !!! http://stackoverflow.com/questions/21720759/convert-jsonobject-to-map
                                       http://stackoverflow.com/questions/6323205/convert-json-string-to-java-mapjsonlib
       
       




                              
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------



					              




[note12] jQuery - Redirect with post data (to let browser save file automatically)
         http://stackoverflow.com/questions/19036684/jquery-redirect-with-post-data
         Backend : refer to [note8]
    // jquery extend function
    $.extend(
    {
        redirectPost: function(location, args)
        {
            var form = '';
            $.each( args, function( key, value ) {
                form += '<input type="hidden" name="'+key+'" value="'+value+'">';
            });
            $('<form action="'+location+'" method="POST">'+form+'</form>').appendTo('body').submit();
        }
    });
    
    usage 1: var redirect = 'http://www.website.com/page?id=23231';
            $.redirectPost(redirect, {x: 'example', y: 'abc'});
    usage 2: Compare (A) and (B)    
             //(A) use redirect in order to let browser save excel file automatically.
             var redirect = urlBase + 'exportReport' + '?page=' + page + '&rowsPerPage=' + rowsPerPage + '&reportType=' + reportType + assetTypeQueryString;
             $.redirectPost(redirect, searchObj);

             //(B) calling http API
             return $http({
                 method: 'POST',
                 url: urlBase + 'exportReport' + '?page=' + page + '&rowsPerPage=' + rowsPerPage + '&reportType=' + reportType + assetTypeQueryString,
                 data: searchObj
             });    



