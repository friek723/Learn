SQL 
    - !!!Online Syntax Editor : http://sqlfiddle.com/#viewSample
    
    - http://www.1keydata.com/tw/sql/sql.html
    - SQL injection : http://www.w3schools.com/sql/sql_injection.asp
                      !http://www.wikihow.com/Prevent-SQL-Injection-in-PHP
                          To prevent SQL injections we will have to use something called prepared statements which uses bound parameters. Prepared Statements do not combine variables with SQL strings, so it is not possible for an attacker to modify the SQL statement. Prepared Statements combine the variable with the compiled SQL statement, this means that the SQL and the variables are sent separately and the variables are just interpreted as strings, not part of the SQL statement.
                      !http://wiki.hashphp.org/Validation    
                      https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
    
    [PDO v.s. ORM v.s. MySQLi]                      
        - PDO v.s. MySQLi : The core advantage of PDO over MySQLi is in its database driver support(database abstraction layer). At the time of this writing, PDO supports 12 different drivers, opposed to MySQLi, which supports MySQL only.

            - https://code.tutsplus.com/tutorials/pdo-vs-mysqli-which-should-you-use--net-24059
            - http://stackoverflow.com/questions/2190737/what-is-the-difference-between-mysql-mysqli-and-pdo
        
        - PDO v.s. ORM (Object-relational mapping): 
               # PDO is a specific implementation of a Database Access Abstraction Layer, it enables you to connect, run SQL and retrieve results from the database with an API that is consistent across different database backends (e.g. MySQL, PostgreSQL, MS SQL, etc.)
               # ORM : It's a framework for mapping relational tables to application domain objects and relationships between them. (see PHP Laravel "Eloquent ORM")
               
               - http://stackoverflow.com/questions/10526190/difference-between-orm-and-pdo
               - https://en.wikipedia.org/wiki/Object-relational_mapping


    - (SubQuery): http://www.1keydata.com/tw/sql/sql-subquery.html 
    - IN : http://www.1keydata.com/tw/sql/sqlin.html
           SELECT * FROM Store_Information WHERE Store_Name IN ('Los Angeles', 'San Diego');
           SELECT SUM(Sales) FROM Store_Information WHERE Store_Name IN (SELECT Store_Name FROM Geography WHERE Region_Name = 'West');
    - HAVING v.s. WHERE : http://www.mysql.tw/2014/06/sqlwherehaving.html
                          [Syntax] SELECT SUM(mamount) as s FROM mymoney WHERE SUBSTR(mdate,1,6)='201401' GROUP BY mperson HAVING s>200;
                          順序 : WHERE + GROUP BY + HAVING
                          沒有GROUP BY的時候，只使用WHERE而不使用HAVING。  使用HAVING的時候，只用在跟GROUP BY相關函數有關的條件上。
                          HAVING只能用在aggregate (合計) 情況下 ，也就是有GROUP BY的時候，並且HAVING要過濾的條件，要跟GROUP BY的合計函數有關。
                          See [note5] below
    
    - LIKE : http://www.1keydata.com/tw/sql/sqllike.html
    - JOIN : !!! https://www.codeproject.com/articles/33052/visual-representation-of-sql-joins
             http://www.tutorialspoint.com/sql/sql-using-joins.htm
             http://www.w3schools.com/sql/sql_join_inner.asp
             [Syntax] SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name=table2.column_name;
             Join 的 WHERE 條件式位置 - see [note6]:  https://tlcheng.wordpress.com/2011/07/08/sql-join-的-where-條件式位置/ 
             
    - UNION : https://www.w3schools.com/sql/sql_union.asp
              The UNION operator is used to combine the result-set of two or more SELECT statements.
              Notice that each SELECT statement within the UNION must have the same number of columns. The columns must also have similar data types. Also, the columns in each SELECT statement must be in the same order.
      UNION ALL to select all (duplicate values also) 
      Syntax : SELECT column_name(s) FROM table1
               UNION
               SELECT column_name(s) FROM table2;

    - EXISTS : 
               Syntax :
                   SELECT [column_name... | expression1 ] FROM [table_name]
                  WHERE [NOT] EXISTS (subquery)

               http://www.w3resource.com/sql/special-operators/sql_exists.php
                    A valid EXISTS subquery must contain an outer reference and it must be a correlated Subquery. 

               EXISTS v.s. IN : http://sqlinthewild.co.za/index.php/2009/08/17/exists-vs-in/
                  IN does a direct match between the column specified before the IN keyword and the values returned by the subquery. When using IN there can only be a single column specified in the select clause of the subquery

    - WITH (NOLOCK) : http://blog.xuite.net/linriva/blog/39534686-%5BT-SQL%5D+WITH+(NOLOCK)%3A+%E6%8F%90%E5%8D%87%E6%9F%A5%E8%A9%A2%E6%95%88%E7%8E%87%E5%92%8C%E9%81%BF%E5%85%8DLOCK%E7%99%BC%E7%94%9F+(%E9%98%B2%E6%AD%A2%E8%B3%87%E6%96%99%E9%81%B8%E5%8F%96%E6%99%82%E8%A2%AB%E9%8E%96%E6%AD%BB)--%E8%BD%89%E8%B2%BC
                      http://www.codeproject.com/Tips/590560/wi                      
    - Dirty Reads : The read is officially “dirty” when it reads data that is uncommitted. This can become problematic if the uncommitted transaction fails or for some other reason is rolled back.
                    http://logicalread.solarwinds.com/sql-server-concurrency-dirty-reads-w01/#.VW5bK8-qobg
                    http://sqlwithmanoj.com/2011/07/20/dirty-reads-and-phantom-reads/
    - Locking in SQL Server : http://www.sqlteam.com/article/introduction-to-locking-in-sql-server    
    - Connection String Reference : http://www.connectionstrings.com/

    - [mysql]
             Install:
                1. sudo yum install mysql-server
                2. sudo /sbin/service mysqld start
                3. sudo /usr/bin/mysql_secure_installation
             login : mysql --host=localhost --user=root --password=
                     SHOW DATABASES;
                     CREATE DATABASE test;
                     USE test;
                     SHOW TABLES;
                     SHOW COLUMNS FROM TableName;
                     SELECT * FROM TableName;
                     DROP TABLE items;





[MySQL]
    Backup/Restore - 
             #https://dev.mysql.com/doc/refman/5.7/en/backup-types.html
             #http://mysqlserverteam.com/creating-and-restoring-database-backups-with-mysqldump-and-mysql-enterprise-backup-part-1-of-2/
             #https://www.electrictoolbox.com/mysqldump-schema-only/
    
    [Allow Connect From Remote]
        # AWS and Linux firewall allow port 3306  
          check port listening command : netstat -tlpn
                                         You should see "0.0.0.0:3306" in "Local Address" column 
                                         If you see "127.0.0.1:3306", only local is allowed (then go to step 2 : mysql config level)

        # mysql config level   :   Edit bind-address = 0.0.0.0 in my.cnf
           https://www.cyberciti.biz/tips/how-do-i-enable-remote-access-to-mysql-database-server.html
        # mysql user level
           method 1 : 
               http://www.thegeekstuff.com/2010/08/allow-mysql-client-connection
               http://fecbob.pixnet.net/blog/post/39089345-%E6%8E%88%E6%AC%8A%E8%A8%AA%E5%95%8Fmysql-server%28%E9%81%A0%E7%AB%AF%E9%80%A3%E7%B7%9Amysql%E6%8F%90%E7%A4%BAhost-is-not-
           method 2 : 
                     (1) login via phpMyAdmin
                     (2) open DB 'mysql',  open table 'user'
                     (3) Find your user name, modify column 'host' to %  (allow all ip)

    [Restart]
        sudo /etc/init.d/mysql restart 
        OR
        sudo service mysql restart 
        https://askubuntu.com/questions/82374/how-do-i-start-stop-mysql-server




-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------



  
[note5]
        SELECT SUM(mamount) as s FROM mymoney WHERE SUBSTR(mdate,1,6)='201401' GROUP BY mperson HAVING s>200;
        以mperson為群組，列出符合201401條件的金額加總，並且只列出總金額大於200的資料。
        所以如果你使用WHERE來進行總金額條件的過濾，或是使用HAVING在普通欄位的條件過濾，就不太適合，或是會出現語法錯誤。
        因此WHERE與HAVING有何差異呢?
            (1) 沒有GROUP BY的時候，只使用WHERE而不使用HAVING。
            例如:
            SELECT * FROM mymoney WHERE mperson='0'; (O 正確)
            SELECT * FROM mymoney HAVING mperson='0'; (X 雖然也正確，但不建議使用)
            
            (2) 有GROUP BY的時候，WHERE在GROUP BY前面，HAVING在GROUP BY後面。
            也就是WHERE條件跟GROUP BY沒有關係，而HAVING是跟GROUP BY有關係的，例如:
            SELECT SUM(mamount) as s FROM mymoney WHERE SUBSTR(mdate,1,6)='201401' GROUP BY mperson HAVING s>200;
            
            (3) 使用HAVING的時候，只用在跟GROUP BY相關函數有關的條件上。
            如上例，HAVING指定SUM(mamount) >200。
            如果你使用WHERE SUM(mamount) >200就會出現錯誤啦。
            
[note6]
    假設有三個表，表1、表2、表3，用下列方式 Join 起來：
        SELECT * FROM 表1
        INNER JOIN 表2 ON 表1.K1=表2.K2
        LEFT JOIN 表3 ON 表1.K1=表3.K3
        在此例中有三種放 WHERE 條件式的位置：
        1.
        SELECT * FROM 表1
        INNER JOIN 表2 ON 表1.K1=表2.K2
        LEFT JOIN 表3 ON 表1.K1=表3.K3
        WHERE 所有條件
        2.
        SELECT * FROM 表1
        INNER JOIN 表2 ON (表1.K1=表2.K2 AND 表1及表2條件)
        LEFT JOIN 表3 ON (表1.K1=表3.K3 AND 表1及表3條件)
        3.
        SELECT * FROM (SELECT * FROM 表1 WHERE 表1條件) AS 表1
        INNER JOIN (SELECT * FROM 表2 WHERE 表2條件) AS 表2 ON 表1.K1=表2.K2
        LEFT JOIN (SELECT * FROM 表3 WHERE 表3條件) AS 表3 ON 表1.K1=表3.K3
        法1 是相容度最高的用法，也是效能最差的方法，非簡單表格或必要下，不要使用，否則會嚴重造成資料庫查詢負擔，間接造成系統負擔。法1的作法是將所有內容先查詢出來，再逐步依條件過濾出要的內容。
        法2 可提高一定的效能，但是可加在紅色的條件就要看資料庫支援的能力，有些允許Key放在後方，有些不允許，甚至有些 WHERE 條件必須放在法1的位置，條件與 WHERE 條件相同，過濾資料多的放前面，過濾資料少的條件放後面。查詢時，一般是先做表1表2連結，過濾完條件後，再做表3連結，再過濾條件。
        法3 有點類似 View 的作法，每個查詢都建立類似 View 的概念，每個表僅查詢出需要連結的部分進行連結。
        法2 適用在重複資料少的情形下，或是查詢基本上都是整張表，法3因為會建立子查詢，所以適用在大量重複資料的擷取，或是從巨型資料表中抽出少部分資料做 JOIN，比如說查詢的若是屬性表這類，大部分是1對1，法2會比較快，若是查詢類似事件紀錄這類1對多，或是事件紀錄太多只抽出最近的紀錄，可能法3會比較快。
                              