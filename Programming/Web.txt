Web Technology : 


    How Browser works : http://taligarsiel.com/Projects/howbrowserswork1.htm
                        http://taligarsiel.com/Projects/howbrowserswork1.htm#The_order_of_processing_scripts_and_style_sheets

                        [How page render] https://friendlybit.com/css/rendering-a-web-page-step-by-step/
                                          STEPS : Download HTML --> parse HTLM + build DOM --> download css/JS/image --> CSS parsed (CSSOM) --> JS parsed + executed  --> render 

    [HTTP2] : https://blog.stackpath.com/glossary/http2/
              https://http2.github.io/faq/#what-are-the-key-differences-to-http1x
              https://simular.co/knowledge/site-build/68-about-http2-and-http11.html
              Verify HTTP/2.0 Support : https://tools.keycdn.com/http2-test
              How to enable on Apache : 
                  https://geekflare.com/http2-implementation-apache-nginx/
                  https://blog.othree.net/log/2015/10/19/apache2-http2/
                  https://www.rosehosting.com/blog/how-to-set-up-apache-with-http2-support-on-ubuntu-16-04/
                  https://www.dadcomputerclub.com/ubuntu-14-04-3-apache-http-2-web-server-setup/


    [Roadmap] !! https://github.com/kamranahmedse/developer-roadmap

    - SEO : http://backlinko.com/google-ranking-factors
            http://katemats.com/what-every-programmer-should-know-about-seo/
            
    - Make website fast : http://learntocodewith.me/posts/make-your-website-fast/

    - *** Google Developer : 
        https://developers.google.com/web/fundamentals/
        https://developers.google.com/web/
        
    - Cross-origin resource sharing (CORS)
          https://en.wikipedia.org/wiki/Cross-origin_resource_sharing  (header : Access-Control-Allow-Origin: *)
          http://enable-cors.org/index.html
          http://www.django-rest-framework.org/topics/ajax-csrf-cors/
       
    - [security]  https://www.wordfence.com/learn/
          - File Upload Vulnerabilities : upload a malicious file directly which is then executed.(Ex : *.php)
              https://www.wordfence.com/learn/how-to-prevent-file-upload-vulnerabilities/

          - XSS : Cross Site Scripting Attacks : Cross-Site Scripting (abbreviated as XSS) is a class of security vulnerability whereby an attacker manages to use a website to deliver a potentially malicious JavaScript payload to an end user.

              !https://www.wordfence.com/learn/how-to-prevent-cross-site-scripting-attacks/
              https://paragonie.com/blog/2015/06/preventing-xss-vulnerabilities-in-php-everything-you-need-know
              http://stackoverflow.com/questions/3623236/htmlspecialchars-vs-htmlentities-when-concerned-with-xss
              http://www.acunetix.com/websitesecurity/cross-site-scripting/
              http://www.acunetix.com/blog/articles/preventing-xss-attacks/
              https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet

          - Cross-site request forgery (CSRF)
              https://en.wikipedia.org/wiki/Cross-site_request_forgery
              https://github.com/pillarjs/understanding-csrf
              https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet
              http://laravel.com/docs/5.1/routing#csrf-protection
              http://www.django-rest-framework.org/topics/ajax-csrf-cors/
              http://www.codeproject.com/Articles/686881/Hack-Proof-Your-ASP-NET-Applica
              http://www.asp.net/web-api/overview/security/preventing-cross-site-request-forgery-(csrf)-attacks

    - Token Based Authentication
          - !!https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication
          - https://scotch.io/tutorials/the-anatomy-of-a-json-web-token           
          - http://stackoverflow.com/questions/1592534/what-is-token-based-authentication
          - !https://stormpath.com/blog/token-auth-spa/
          - http://www.django-rest-framework.org/api-guide/authentication/
          - ! https://auth0.com/blog/ten-things-you-should-know-about-tokens-and-cookies/
          - http://stackoverflow.com/questions/35308263/storing-authentication-tokens-in-a-restful-api-without-using-http-sessions
          - !https://auth0.com/blog/ten-things-you-should-know-about-tokens-and-cookies/
          - Angular JWT: https://auth0.com/blog/angularjs-authentication-with-cookies-vs-token/


          - JWT token : JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object.
          After login we get a JWT Token from server, for every subsequent request we put JWT token in Http Header  --> !!! "Authorization: Bearer TOKEN_STRING"
              - https://jwt.io/introduction/
              - https://jwt.io/ : Debug/Decode token
              - http://stackoverflow.com/questions/24709944/jwt-token-in-postman-header
              - http://stackoverflow.com/questions/33265812/best-http-authorization-header-type-for-jwt
              - https://float-middle.com/json-web-tokens-jwt-vs-sessions/
              - !! http://robmclarty.com/blog/what-is-a-json-web-token
                    No Session to Manage (stateless): The token has everything you need to identify users, and the rest of your app's state can be stored in local storage on the client side. No need for a session object stored on the server.
              

          - Where to store the token on client side ? 
             - !!https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage
             - https://security.stackexchange.com/questions/80727/best-place-to-store-authentication-tokens-client-side


    - OAuth & OpenID     
          Difference : http://stackoverflow.com/questions/1087031/whats-the-difference-between-openid-and-oauth
          

          OAuth 2 v.s. JSON Web Tokens : JWT is an authentication protocol, OAuth2 is an authentication framework. It is possible to have an OAuth2 implementation that issues JSON Web Tokens as an authentication mechanism. 
              - http://www.seedbox.com/en/blog/2015/06/05/oauth-2-vs-json-web-tokens-comment-securiser-un-api/

          OAuth 
              http://en.wikipedia.org/wiki/OAuth
              http://oauth.net/2/     (http://oauth.net/)
              http://blog.yorkxin.org/posts/2013/09/30/oauth2-1-introduction/
              !! https://www.slideshare.net/alvarosanchezmariscal/stateless-authentication-with-oauth-2-and-jwt-javazone-2015

          OpenID 
              http://briian.com/5328/openid.html    
         
    - RESTful : http://rest.elkstein.org/
                 
                [POST v.s. PUT]
                    https://ihower.tw/blog/archives/6483
                    http://stackoverflow.com/questions/630453/put-vs-post-in-rest
                    http://restcookbook.com/HTTP%20Methods/put-vs-post/
                    
 
    - Sessions & Cookies
        ! http://www.tangowithdjango.com/book/chapters/cookie.html
        http://stackoverflow.com/questions/359434/differences-between-cookies-and-sessions
   
        Where should you store your shopping cart? 
        ("Session" or "Cookie" or "Web Storage" or "Database") 
           http://www.wiliam.com.au/wiliam-blog/where-should-you-store-your-cart
           http://ux.stackexchange.com/questions/72894/for-shopping-cart-use-a-session-or-cookie

    - Single Page Application SPA 
        https://docs.cozy.io/en/hack/getting-started/learn-single-page-app-way.html
        http://singlepageappbook.com/
             

    [Performance]
        - General : 
                    https://developer.mozilla.org/en-US/Apps/Fundamentals/Performance
                    !! https://varvy.com/pagespeed/
                    !! https://varvy.com/performance/
                    !!! https://www.nginx.com/blog/10-tips-for-10x-application-performance/
                    !!! https://www.keycdn.com/blog/website-performance-optimization/
                    https://developers.google.com/web/fundamentals/performance/
                    https://www.keycdn.com/blog/web-performance-advice/

        - Website Speed Test : https://tools.keycdn.com/speed
                               https://tools.keycdn.com/ping

        - How a webpage is loaded and displayed : https://varvy.com/pagespeed/display.html
                                                  https://friendlybit.com/css/rendering-a-web-page-step-by-step/
          Download HTML --> parse HTLM + build DOM --> download css/JS/image --> CSS parsed (CSSOM) --> JS parsed + executed  --> render 

        - Connection: "Keep-Alive" (HTTP header)   (TCP slow start)
          - How to turn on : webserver config or .htaccess
          - ! https://varvy.com/pagespeed/keep-alive.html
          - https://varvy.com/pagespeed/slow-start.html
          - https://www.maxcdn.com/one/visual-glossary/tcp-slow-start/

        - Cache-Control: max-age=2592000, public (HTTP header)
          - How to turn on : webserver config or .htaccess  
          - ! https://varvy.com/pagespeed/cache-control.html
          - !! https://www.keycdn.com/blog/http-cache-headers/
               https://www.keycdn.com/support/cache-control/
          - https://varvy.com/pagespeed/leverage-browser-caching.html
          - http://dev.mobify.com/blog/beginners-guide-to-http-cache-headers/
          - https://varvy.com/performance/application-cache.html

        - Gzip compression
          - How to turn on : webserver config or .htaccess  
          - ! https://varvy.com/pagespeed/enable-compression.html
          - Check : https://checkgzipcompression.com/

        - Critical rendering path : https://varvy.com/pagespeed/critical-render-path.html
                                    https://varvy.com/pagespeed/first-view.html
                                    !! https://developers.google.com/web/fundamentals/performance/critical-rendering-path/
          Defer loading javascript : https://varvy.com/pagespeed/defer-loading-javascript.html
                                     https://varvy.com/pagespeed/render-blocking.html
          Defer loading images : https://varvy.com/pagespeed/defer-images.html
          Eliminate render blocking css : https://varvy.com/pagespeed/render-blocking-css.html
                                          https://varvy.com/pagespeed/critical-css-calls.html
                                          https://varvy.com/performance/cssom.html
                                          https://varvy.com/pagespeed/optimize-css-delivery.html
                                          https://varvy.com/pagespeed/style-script-order.html


----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------


HTTP & WEB tool
 - [Fiddler] web debugging proxy  : http://www.telerik.com/fiddler 
             1. captures HTTP and HTTPS traffic and logs it 
             2. can also be used to modify ("fiddle with") HTTP traffic for troubleshooting purposes as it is being sent or received.
 - (Press F12 on Chrome) http://stackoverflow.com/questions/4423061/view-http-headers-in-google-chrome
 - Chrome plugin [Live HTTP Headers] https://chrome.google.com/webstore/detail/live-http-headers/iaiioopjkcekapmldfgbebdclcnpgnlo
 - How Web Browsers work : http://taligarsiel.com/Projects/howbrowserswork1.htm
 - (!!Readme) A Software Developer's Guide to HTTP : http://odetocode.com/Articles/List
 - POST v.s. GET : http://blog.toright.com/posts/1203/%E6%B7%BA%E8%AB%87-http-method%EF%BC%9A%E8%A1%A8%E5%96%AE%E4%B8%AD%E7%9A%84-get-%E8%88%87-post-%E6%9C%89%E4%BB%80%E9%BA%BC%E5%B7%AE%E5%88%A5%EF%BC%9F.html
 


----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------


Web Framework
 - http://hotframeworks.com/
   http://www.hurricanesoftwares.com/most-popular-web-application-frameworks/
   http://en.wikipedia.org/wiki/Comparison_of_web_application_frameworks
   http://en.wikipedia.org/wiki/Web_application_framework
 - popularity 
    - Frontend : https://github.com/showcases/front-end-javascript-frameworks
    - Backend : https://github.com/showcases/web-application-frameworks



----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------

[CMS content management systems]

    list of notable CMS : https://en.wikipedia.org/wiki/List_of_content_management_systems
    
    Top 10 PHP CMS : https://weblizar.com/top-10-php-cms/



----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------

Web server & App server 
 - http://stackoverflow.com/questions/936197/what-is-the-difference-between-application-server-and-web-server
 [Reverse Proxy Server] http://www.arthurtoday.com/2010/01/reverse-proxy-server.html
                        http://en.wikipedia.org/wiki/Reverse_proxy
                        [NGINX Reverse Proxy] http://nginx.com/resources/admin-guide/reverse-proxy/
                                              http://en.wikipedia.org/wiki/Nginx
 - Nginx v.s. Apache
                    http://stackoverflow.com/questions/11171992/nginx-v-apache-for-high-traffic-sites
                    http://stackoverflow.com/questions/4540669/nginx-and-apache
                    http://readystate4.com/2012/07/08/nginx-the-non-blocking-model-and-why-apache-sucks/
                    http://blog.martinfjordvald.com/2011/02/nginx-primer-2-from-apache-to-nginx/

 - .htaccess : redirects, enabling compression, rewriting urls, leveraging browser caching...etc
               The file provides a way to do things to your webserver that would normally be done in configuration files of your webserver. 
      - !! http://www.htaccess-guide.com/
           http://www.htaccess-guide.com/preventing-access-to-your-php-includes-files/
           http://www.htaccess-guide.com/disable-directory-listings/
           http://www.htaccess-guide.com/redirects/
      - https://varvy.com/pagespeed/htaccess.html
      - http://www.askapache.com/htaccess/
      - https://www.digitalocean.com/community/tutorials/how-to-use-the-htaccess-file
      - http://www.freewebmasterhelp.com/tutorials/htaccess/
        http://www.freewebmasterhelp.com/tutorials/htaccess/2


 - Apache 
      document : https://httpd.apache.org/docs/

       config : http://linux.vbird.org/linux_server/0360apache.php#www_basic_pkg
                https://help.ubuntu.com/lts/serverguide/httpd.html#http-configuration
                http://stackoverflow.com/questions/22519159/how-does-apache-know-which-file-to-use-in-etc-httpd-conf-d
                http://superuser.com/questions/676328/should-i-use-httpd-conf-or-apache2-conf-for-apache-configuration
                http://serverfault.com/questions/430974/ubuntu-apache-httpd-conf-or-apache2-conf
                
                [Path] !!! http://serverfault.com/questions/216252/how-to-configure-apache-sites-available-vs-httpd-conf
                       !! Where to find : http://stackoverflow.com/questions/12202021/where-is-my-httpd-conf-file-located-apache
                       !!! https://wiki.apache.org/httpd/DistrosDefaultLayout

                    - httpd.conf v.s. apache2.conf : 
                        # apache2.conf: the main Apache2 configuration file. Contains settings that are global to Apache2.
                        # httpd.conf: historically the main Apache2 configuration file, named after the httpd daemon. The file can be used for user specific configuration options that globally effect Apache2.
                        # httpd.conf is empty (or nonexistent) in some distributions. If an apache2.conf is present you should probably not edit this, but include your own httpd.conf from the apache2.conf. This is because apache2.conf may be overwritten by package updates. Your apache2.conf therefore should include this line. If it doesn't already, you can add it yourself: Include httpd.conf

                        - https://serverfault.com/questions/430974/ubuntu-apache-httpd-conf-or-apache2-conf
                        - https://superuser.com/questions/676328/should-i-use-httpd-conf-or-apache2-conf-for-apache-configuration
                        - https://askubuntu.com/questions/652095/cant-find-httpd-conf

                    - "main" config : /etc/apache2/apache2.conf
                                      /etc/apache/apache2.conf
                                      /etc/httpd/conf/httpd.conf 
                                      /etc/httpd/conf.d/*.conf
                    - "user" config : /etc/apache2/httpd.conf
                    - vhosts : /etc/apache2/sites-available 
                               - [content] : see [note9] for example
                               - files (one per file, typically) you might want to number them, e.g. 00-domain.com, 01-otherdomain.com
                               - (STEP 1) Add xxx.conf (see [note9][example port 8080 for PHP Laravel site])
                                 (STEP 2) sudo a2ensite xxx.conf    (enable it)
                                 (STEP 3-1) service apache2 reload
                                 (STEP 3-2) If you use port other than 80 : 
                                              sudo vi /etc/apache2/ports.conf
                                              Add :
                                                   Listen 80
                                                   Listen 8080
                                              see http://stackoverflow.com/questions/3940909/configure-apache-to-listen-on-port-other-than-80     
                                 (STEP 4) sudo service apache2 restart
                               - !! Set Up Apache Virtual Hosts on Ubuntu 14.04 : https://www.digitalocean.com/community/tutorials/how-to-set-up-apache-virtual-hosts-on-ubuntu-14-04-lts
                    - ports (Listen directives) : /etc/apache2/ports.conf
                    - mods : /etc/apache2/mods-available
                
                [HTTPS] 
                   - !(tried OK) https://www.digitalocean.com/community/tutorials/how-to-create-a-ssl-certificate-on-apache-for-ubuntu-14-04
                   - !! Free-ssl-certificates : https://www.keycdn.com/blog/free-ssl-certificates/
                                                https://www.keycdn.com/blog/http-to-https/
                   - https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-16-04
                   
      log : /var/log/httpd/error_log 
             /var/log/apache2/error.log    
                
      restart : service httpd restart
                 OR 
                sudo service apache2 restart 

      Running Multiple Apache Instances : 
          - https://wiki.apache.org/httpd/RunningMultipleApacheInstances
          - https://serverfault.com/questions/397235/how-to-run-two-instances-of-apache-on-same-system-ubuntu

      Check setting (which MPM used?): "apachectl -V"

      Which Apache MPM (Multi-Processing Modules) to use?
          - How to config : http://dasunhegoda.com/configure-apache-multi-processing-modules-mpms/531/
          - Which MPM used? : "apachectl -V"
          - doc : http://httpd.apache.org/docs/2.4/mpm.html
          - ! https://serverfault.com/questions/383526/how-do-i-select-which-apache-mpm-to-use
          - https://tecadmin.net/apache-mpm-prefork-and-worker-and-event/
          - https://amigotechnotes.wordpress.com/2014/02/17/how-multi-core-processors-accelerate-your-lamp-applications/
          - http://stackoverflow.com/questions/1623914/what-is-thread-safe-or-non-thread-safe-in-php




----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------



[note9]
NameVirtualHost *:80
<VirtualHost *:80>
        #  General setup for the virtual host
        ServerName elsa
        Redirect permanent / https://10.1.38.81/
</VirtualHost>

<VirtualHost *:443>
        #  General setup for the virtual host
        ServerName elsa
        SSLEngine on
        SSLCertificateFile      /etc/httpd/elsatest.pem
        SSLCertificateKeyFile   /etc/httpd/elsatest.key
        SSLCACertificateFile    /etc/httpd/root.pem
        SSLCertificateChainFile /etc/httpd/intranet.pem
        SSLCipherSuite RC4-SHA:AES128-SHA:HIGH:!aNULL:!MD5
        SSLHonorCipherOrder on
        DocumentRoot /usr/local/elsa/web/lib
        SetEnv ELSA_CONF /etc/elsa_web.conf
        <Location "/">
                Order Allow,Deny
                Allow from all
                SetHandler perl-script
                PerlResponseHandler Plack::Handler::Apache2
                PerlSetVar psgi_app /usr/local/elsa/web/lib/Web.psgi
        </Location>
        # Cleanup proxied HTTP auth
        RewriteEngine on
        RewriteCond %{HTTP:Authorization} ^(.*)
        RewriteRule ^(.*) - [E=HTTP_AUTHORIZATION:%1]
</VirtualHost>

NameVirtualHost *:8080
<VirtualHost *:8080>
        ServerName phpMyAdmin
        DocumentRoot /var/www/html
        <Location "/">
                Order Allow,Deny
                Allow from all
        </Location>
</VirtualHost>
---------------------------------------
[laravel.conf]

<VirtualHost *:80>     
        ServerAdmin webmaster@localhost
       
        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined

        DocumentRoot /var/www
        <Directory /var/www>
          Options Indexes FollowSymLinks MultiViews
          AllowOverride All
          Order allow,deny
          allow from all
        </Directory>
</VirtualHost>
---------------------------------------
[example port 8080 for PHP Laravel site]

<VirtualHost *:8080>
        ServerAdmin webmaster@localhost

        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined

        DocumentRoot /var/www/jobseek/jobseeking/public
        <Directory /var/www/jobseek/jobseeking/public>
          Options Indexes FollowSymLinks MultiViews
          AllowOverride All
          Order allow,deny
          allow from all
        </Directory>
</VirtualHost>
---------------------------------------




               