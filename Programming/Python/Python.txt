Python
        Good tuturial : http://www.diveintopython3.net/
                        http://www.tutorialspoint.com/python/
        http://docs.openstack.org/user-guide/content/
        Install from sources: : python setup.py install
        Building a Python 3 REST application : http://www.giantflyingsaucer.com/blog/?p=5192
        Bundling Python files into a stand-alone executable :  http://blog.ablepear.com/2012/10/bundling-python-files-into-stand-alone.html
        make a py file executable :  http://stackoverflow.com/questions/304883/what-do-i-use-on-linux-to-make-a-python-program-executable
        
        pip freeze (Output installed packages in requirements format.) - http://reader.roodo.com/thinkingmore/archives/18853358.html
                                                                         https://devcenter.heroku.com/articles/getting-started-with-python#declare-app-dependencies
        
        The Module Search Path : https://docs.python.org/3/tutorial/modules.html#tut-searchpath
                                 import sys
                                 print sys.path
        [pip : Package Manager]
            Install on Ubuntu : https://www.rosehosting.com/blog/how-to-install-pip-on-ubuntu-16-04/
                sudo apt-get update && sudo apt-get -y upgrade
                sudo apt-get install python-pip
                pip -V
                [Error : pip install xxx] locale.Error: unsupported locale setting
                                          solution : export LC_ALL=C
            - pip search package_name
            - pip install package_name
            - pip uninstall package_name
            - pip freeze   (Output installed packages in requirements format)
            - pip list     (List installed packages)
            - pip --help

        
        [virtualenv] http://docs.python-guide.org/en/latest/dev/virtualenvs/
            command : 
                - virtualenv my_project  : start a new virtual project.
                   it will create a folder in the current directory which will contain the Python executable files, and a copy of the pip library which you can use to install other packages.
                - source my_project/bin/activate : begin using the virtual environment, it needs to be activated
                  The name of the current virtual environment will now appear on the left of the prompt (e.g. (my_project)Your-Computer:your_project UserName$) to let you know that itâ€™s active. From now on, any package that you install using pip will be placed in the my_project folder, isolated from the global Python installation.
                - deactivate : If you are done working in the virtual environment for the moment, you can deactivate it:
                - To delete a virtual environment, just delete its folder. (In this case, it would be rm -rf my_project.)
                - pip freeze > requirements.txt : This will create a requirements.txt file, which contains a simple list of all the packages in the current environment, and their respective versions.
                - pip install -r requirements.txt : Later it will be easier for a different developer (or you, if you need to re-create the environment) to install the same packages using the same versions




        Install package : https://packaging.python.org/en/latest/pip_easy_install.html
                          http://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install
        
             
        Timer :  http://stackoverflow.com/questions/3393612/run-certain-code-every-n-seconds
        
        Time :  from time import gmtime, strftime, localtime
                strftime("%Y-%m-%d %H:%M:%S", localtime())
        
        Scheduler :  1. http://apscheduler.readthedocs.org/en/latest/
                        http://stackoverflow.com/questions/11523918/python-start-a-function-at-given-time
                     2. https://github.com/dbader/schedule
                        http://stackoverflow.com/questions/2398661/schedule-a-repeating-event-in-python-3   (Search dbader)
        
        HTTP :  http://docs.python-requests.org/en/latest/index.html
          
        LDAP :  http://www.python-ldap.org/docs.shtml
                http://www.python-ldap.org/doc/html/index.html
                http://stackoverflow.com/questions/4784775/ldap-query-in-python
        json : http://xahlee.info/perl-python/python_json_tutorial.html
                   import json
                   json.dumps(dict) returns type string
                   json.loads(string) returns type dict
        
        import name conflicts : http://stackoverflow.com/questions/1900189/how-to-access-a-standard-library-module-in-python-when-there-is-a-local-module-w
                                http://stackoverflow.com/questions/6031584/python-importing-from-builtin-library-when-module-with-same-name-exists
                                http://programmers.stackexchange.com/questions/187403/import-module-vs-from-module-import-function
                                
        Compare dictionary : http://stackoverflow.com/questions/4527942/comparing-two-dictionaries-in-python
                             (dict1 == dict2)
                             (shared_items = set(A.items()) & set(B.items()))
                             (diff_items = set(A.items()) ^ set(B.items()))
        
        String difference : http://stackoverflow.com/questions/10775029/finding-differences-between-strings
                                --> note that the input of Differ().compare(s1,s2) can be string or list, that produce different output.
                            difflib (see [note10]) --> https://docs.python.org/2/library/difflib.html
                            
         
        Finding what methods an object has : http://stackoverflow.com/questions/34439/finding-what-methods-an-object-has                     
        Object method & attribute:
                        All attributes for a object: print dir(objectName) 
                        All callable methods for a object: print [method for method in dir(objectName) if callable(getattr(objectName, method))]

        SSH (pxssh)(extends pexpect.spawn):  
                      http://pexpect.readthedocs.org/en/latest/api/pxssh.html
                      http://www.pythonforbeginners.com/code-snippets-source-code/ssh-connection-with-python
                      could not set shell prompt : http://stackoverflow.com/questions/21268497/cant-seem-to-get-pexpect-to-print-data-from-command
                      
        SSH2 (paramiko)(Good compatibility, I've used it more, see [note7]): 
                         http://www.rummandba.com/2012/04/python-script-for-remote-server.html
                         Code (Execute commands and copy files over SSH): http://garage4hackers.com/showthread.php?t=3234
                         Code : http://sebastiandahlgren.se/2012/10/11/using-paramiko-to-send-ssh-commands/     
                         sftp : Google "paramiko file transfer"
                         
        Console command (Pexpect, extended by pxssh) : Pexpect can be used for automating interactive applications such as ssh, ftp, passwd, telnet, etc.
                                                       https://github.com/pexpect/pexpect/blob/master/doc/overview.rst
                                                       http://pexpect.readthedocs.org/en/latest/api/pexpect.html
                                                       !http://linux.byexamples.com/archives/346/python-how-to-access-ssh-with-pexpect/
                                                       
        Execute Shell Command in Python : http://stackoverflow.com/questions/89228/calling-an-external-command-in-python
                                                       
        run background as a daemon :    http://code.activestate.com/recipes/278731/
                                        http://stackoverflow.com/questions/1603109/how-to-make-a-python-script-run-like-a-service-or-daemon-in-linux?rq=1

        async/await  : 
                       !https://hackernoon.com/asynchronous-python-45df84b82434
                       https://snarky.ca/how-the-heck-does-async-await-work-in-python-3-5/
                       http://aiohttp.readthedocs.io/

                       


                
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
                        


[note7]
def get_paramiko(host, user, passwd, cmdList):

    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    print "Connecting..."
    ssh.connect(hostname=host, username=user, password=passwd)
    print "Host " + host + " connected"


    stdin = None
    stdout = None
    stderr = None
    try:
        count = 0
        for cmd in cmdList:
            count+=1
            stdin, stdout, stderr = ssh.exec_command(cmd)
            print "Command : " + cmd
            #print type(stdout)
            cmd_out = stdout.readlines()
            if count != len(cmdList): # not last one
                print "cmd out : " + str(cmd_out)
    except Exception ,e:
        print "Exception!!"
        print e
        print stderr.readlines()

    str_result = ''.join(str(e) for e in cmd_out)

    text_file = open("paramiko_out_"+host, "w")
    text_file.write(str_result)
    text_file.close()

    ssh.close()
    print 'OK'




[note10]
from difflib import Differ # str compare
def str_diff(s1, s2):  # !! s1 and s2 are both String
    ret = ""

    # 1. The two inputs of Differ().compare() can be string or list, that would produce different output.
    # 2. For string, output dif looks like : ['  a', '  a', '  a', '- b', '- b', '- b', '+ k', '+ k', '+ k', '  c', '  c', '  c']   
    # 3. For list, output dif looks like : ['This is line not change\r\n', '- This is line removed\r\n', '?      ^^\n', '+ This is line added\r\n', '?     ^^\n']
    #           where ^ stands for the position of different char for the line before.
    # 4. !!! So another easier way to compare is to split s1 and s2 into lines as type list, each item in the list represents a line, then compare two lists.
    #        The output would be more accurate according to test. 
    
    dif = list(Differ().compare(s2, s1))  # !! s1 and s2 are both String

    # Debug : 
    #write_file("qwert" , ''.join(str(e) for e in dif))
 

    keys = ['-','+']    
    for key in keys: 
        tmp = ""
        currentLine = ""
        isChange = False
        for i, d in enumerate(dif):
            if i == len(dif)-1 or d[2] == '\n': # find a new line or last line
                if isChange == True:
                    if currentLine.isspace() == False:  # and isIgnoredConfig(currentLine) == False --> it's done in get_ssh() already
                        tmp = tmp + currentLine + "\r\n" + "<br>"
                        print "str_diff : add currentLine : " + currentLine
                    else:
                        #if isIgnoredConfig(currentLine) == True:
                        #    print "str_diff : ignore config change -->" + currentLine
                        if currentLine.isspace() == True:
                            print "str_diff : current line contains space or newline only : " + currentLine    
                    if i == len(dif)-1:
                        print "the last line"
                currentLine = ""
                isChange = False
            elif d[0] == key: # find diff char in this line
                isChange = True
                currentLine += d[2]
            elif d[0] in keys:
                pass
            else:
                currentLine += d[2]
        if tmp != "" and tmp.isspace() == False:
            if key == '-':
                ret = ret + " Remove : <br>" + tmp
            else:
                ret = ret + " Add : <br>" + tmp


    return ret
    
                                        